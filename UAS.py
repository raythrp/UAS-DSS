# -- coding: utf-8 --
"""text-emotion-predicter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sukq7-qiPijUnKTCyl5aZiF8iE9rvxWm

Dependenceis Installation
"""



import spacy
nlp = spacy.load("en_core_web_sm")

import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split

from sklearn.naive_bayes import MultinomialNB
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

import warnings
warnings.filterwarnings('ignore')

"""Data Exploration"""

data = pd.read_csv("Emotion_classify_Data.csv")

data.head()

data.tail()

data.info()

data.shape

data.isna().sum()

data['Emotion'].value_counts()

"""Data Preprocessing with Spacy"""

text = data['Comment'][6]

text

"""Data Tokenization"""

document = nlp(text)
document

for token in document:
  print(token)

"""Transform to base word"""

for token in document:
  print(token.lemma_)

"""Stop Words"""

for token in document:
  if token.is_stop or token.is_punct:
    print(token)

"""Preprocess Function Declaration"""

def preprocess(text):
  document = nlp(text)
  done_tokens = []
  for token in document:
    if token.is_stop or token.is_punct:
      continue
    done_tokens.append(token.lemma_)
  return " ".join(done_tokens)

print(text)
done_text = preprocess(text)
print(done_text)

"""Implement preprocess on the dataframe"""

data['Preprocessed Comment'] = data['Comment'].apply(preprocess)
data

"""Numerize the emotion"""

data['Emotion Number'] = data['Emotion'].map({'joy': 0, 'fear': 1, 'anger': 2})
data.head()

"""Splitting training and testing data"""

x_train, x_test, y_train, y_test = train_test_split(data['Preprocessed Comment'], data['Emotion Number'], test_size=0.2, random_state=42, stratify=data['Emotion Number'])

x_test.shape

x_train.shape

"""Text column to vector conversion"""

v = TfidfVectorizer()

x_train_cv = v.fit_transform(x_train)
x_test_cv = v.transform(x_test)

print(v.vocabulary_)

"""Naive Bayes Implementation"""

Naive_model = MultinomialNB()
Naive_model.fit(x_train_cv, y_train)

y_pred = Naive_model.predict(x_test_cv)

print(accuracy_score(y_test, y_pred))

print(classification_report(y_test, y_pred))